generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Notification {
  id          String   @id @default(cuid())
  read        Boolean  @default(false)
  title       String
  description String
  timestamp   DateTime @default(now())

  order     Order?   @relation(fields: [orderId], references: [orderId])
  orderId   String?
  company   Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String?
}

model Box {
  boxId  String @id @default(cuid())
  type   String
  width  Int
  height Int
  length Int
  price  Int
  status String

  // relation fields
  orderItems OrderItem[]
}

model Order {
  orderId     String   @id @default(cuid())
  packingType String
  orderDate   DateTime @default(now())

  // relation fields
  orderItems    OrderItem[]
  trackAndTrace TrackAndTrace?

  address      Address        @relation(fields: [addressId], references: [id], onDelete: Cascade)
  addressId    String
  company      Company?       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId    String?
  Notification Notification[]
}

model OrderItem {
  orderItemId String @id @default(cuid())
  quantity    Int

  // relation fields
  box       Box?    @relation(fields: [boxId], references: [boxId])
  boxId     String?
  order     Order   @relation(fields: [orderId], references: [orderId], onDelete: Cascade)
  orderId   String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
}

model TrackAndTrace {
  id               String @id @default(cuid())
  number           String
  verificationCode String
  status           String

  // relation fields
  carrier   Carrier @relation(fields: [carrierId], references: [id], onDelete: Cascade)
  carrierId String
  order     Order   @relation(fields: [orderId], references: [orderId], onDelete: Cascade)
  orderId   String

  // @@unique([carrierId, orderId])
  @@unique([number, verificationCode])
  @@unique(orderId)
}

model Carrier {
  id     String  @id @default(cuid())
  name   String
  phone  String  @db.Char(20)
  email  String  @db.Char(100)
  active Boolean @default(true)
  image  String?

  amountOfCharacters Int
  numOnly            Boolean
  prefix             String

  // relation fields
  trackAndTraces TrackAndTrace[]
}

model Product {
  id        String  @id @default(cuid())
  stock     Int
  eta       Int
  linkToImg String?

  // relation fields
  orderItem          OrderItem[]
  productPrice       ProductPrice[]
  productDescription ProductDescription[]
  productToCategory  ProductToCategory[]
}

model ProductToCategory {
  product    Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String
  category   ProductCategory @relation(fields: [categoryId], references: [categoryId], onDelete: Cascade)
  categoryId String

  @@id([productId, categoryId])
}

model ProductCategory {
  categoryId   String @id @default(cuid())
  categoryName String

  // relation fields
  productToCategory ProductToCategory[]
}

model ProductPrice {
  currencyId    String
  unitOfMeasure String
  price         Float
  syncDateTime  DateTime

  // relation fields
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  @@id([productId, currencyId, unitOfMeasure])
}

model ProductDescription {
  languageId              String
  productName             String?
  productShortDescription String? @db.LongText
  productLongDescription  String? @db.LongText

  // relation fields
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  @@id([productId, languageId])
}

model Customer {
  customerId String @id @default(cuid())
  firstName  String
  secondName String

  phoneNr String
  email   String

  // relation fields
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String
}

model Company {
  id    String  @id @default(cuid())
  name  String
  image String?

  // relation fields
  employees     Customer[]
  addresses     Address[]
  notifications Notification[]
  orders        Order[]
}

model Address {
  id      String  @id @default(cuid())
  name    String?
  street  String
  number  String
  city    String
  zipCode Int
  country String

  // relation fields
  company   Company? @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String?
  order     Order[]
}
